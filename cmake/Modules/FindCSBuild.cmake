# Find a C# Project builder
# - Mono: xbuild
# - .NET: msbuild
# - .NET CoreCLR: dotnet

set(CSBUILD_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}/csharp")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/csharp")
include( FindPackageHandleStandardArgs )

if(CSBUILD_TOOL MATCHES "DotNet|Mono|DotNetStandard")
    set(DotNet_FOUND FALSE)
    set(Mono_FOUND FALSE)
    set(DotNetStandard_FOUND FALSE)
    find_package( ${CSBUILD_TOOL} REQUIRED )
endif()
if(NOT DotNet_FOUND AND NOT Mono_FOUND AND NOT DotNetStandard_FOUND)
    if(CSBUILD_TOOL)
        message(WARNING "Ignored -DCSBUILD_TOOL=${CSBUILD_TOOL} it does not match DotNet|Mono|DotNetStandard or program not found")
    endif()
    if( WIN32 )
        find_package( DotNetStandard )
        if(NOT DotNetStandard_FOUND)
            find_package( DotNet )
            if( NOT DotNet_FOUND )
                find_package( Mono )
            endif()
        endif()
    else( UNIX )
        find_package( DotNetStandard )
        if( NOT DotNetStandard_FOUND )
            find_package( Mono )
        endif()
    endif()

endif()

set(MSBUILD_TOOLSET "12.0" CACHE STRING "C# .NET framework" )
set(CSHARP_TARGET_FRAMEWORK_VERSION "4.5" CACHE STRING "C# .NET framework for msbuild and xbuild" )
set(CSHARP_TARGET_FRAMEWORK "netstandard2.0" CACHE STRING "C# .NET framework for dotnet" )

if(CMAKE_SIZEOF_VOID_P EQUAL "4")
    set(CSHARP_PLATFORM "x86" CACHE STRING "C# target platform: x86, x64, anycpu, or itanium")
elseif( CMAKE_SIZEOF_VOID_P EQUAL "8" )
    if(Mono_FOUND AND "${Mono_VERSION}" VERSION_LESS "2.10.10")
        set(CSHARP_PLATFORM "anycpu" CACHE STRING "C# target platform: x86, x64, anycpu, or itanium")
    else()
        set(CSHARP_PLATFORM "x64" CACHE STRING "C# target platform: x86, x64, anycpu, or itanium")
    endif()
else()
    message(FATAL_ERROR "Only 32-bit and 64-bit are supported: ${CMAKE_SIZEOF_VOID_P}")
endif()


if(MSVC)
    set(CSHARP_BUILDER_OUTPUT_PATH "${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>")
else()
    if(CMAKE_BUILD_TYPE)
        set(CSHARP_BUILDER_OUTPUT_PATH "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}")
    else()
        set(CSHARP_BUILDER_OUTPUT_PATH "${CMAKE_CURRENT_BINARY_DIR}/Debug")
    endif()
endif()

string(REPLACE "." "" _version "${CSHARP_TARGET_FRAMEWORK_VERSION}")
set(CSBUILD_FOUND TRUE)
set(CSBUILD_RESTORE_FLAGS "--version")
set(CSBUILD_PACK_FLAGS "--version")
set(CSBUILD_CLEAN_FLAGS "--version")
set(CSBUILD_BUILD_FLAGS "")
set(CSBUILD_CLEAR_NUGET_CACHE "echo")
if(DotNet_FOUND)
    set(CSBUILD_RESTORE_FLAGS "")
    set(CSBUILD_PACK_FLAGS "/version")
    set(CSBUILD_CLEAN_FLAGS "/version")
    set(CSBUILD_EXECUTABLE "${MSBUILD_EXECUTABLE}")
    set(CSBUILD_CSPROJ "msbuild.csproj")
    set(CSBUILD_OUPUT_PREFIX "")
    message(STATUS "Found .NET: ${DotNet_EXECUTABLE_VERSION}")
    set(CSHARP_INTERPRETER "")
    set(CSHARP_TYPE "net${_version}")
    set(CSHARP_BUILDER_VERSION ".NET ${DotNet_EXECUTABLE_VERSION} - net${_version}")
elseif(Mono_FOUND)
    set(CSBUILD_RESTORE_FLAGS "")
    set(CSBUILD_PACK_FLAGS "/version")
    set(CSBUILD_CLEAN_FLAGS "/version")
    message(STATUS "Found Mono: ${Mono_VERSION}")
    set(CSBUILD_EXECUTABLE "${XBUILD_EXECUTABLE}")
    set(CSBUILD_CSPROJ "msbuild.csproj")
    set(CSBUILD_OUPUT_PREFIX "")
    set(CSHARP_INTERPRETER "${Mono_EXECUTABLE}")
    set(CSHARP_TYPE "net${_version}")
    set(CSHARP_BUILDER_VERSION "Mono ${Mono_VERSION} - net${_version}")
elseif(DotNetStandard_FOUND)

    if(NOT CSBUILD_DISABLE_CONFIG)
        set(CSBUILD_CONFIG --configuration $<CONFIG>)
    endif()

    message(STATUS "Found .NET Core: ${DotNetStandard_VERSION}")
    set(CSBUILD_EXECUTABLE "${DotNetStandard_EXECUTABLE}")
    set(CSBUILD_CSPROJ "dotnetStandard.csproj")
    set(CSBUILD_OUPUT_PREFIX "")
    set(CSHARP_INTERPRETER "${DotNetStandard_EXECUTABLE}")
    set(CSBUILD_RESTORE_FLAGS "restore")
    set(CSHARP_TYPE "${CSHARP_TARGET_FRAMEWORK}")
    set(CSBUILD_CLEAN_FLAGS clean ${CSBUILD_CONFIG})
    set(CSBUILD_BUILD_FLAGS publish ${CSBUILD_CONFIG})
    set(CSHARP_BUILDER_VERSION ".NET Standard ${DotNetStandard_VERSION} - ${CSHARP_TARGET_FRAMEWORK}")
    set(CSBUILD_CLEAR_NUGET_CACHE ${CSHARP_INTERPRETER} nuget locals all --clear)
else()
    set(CSBUILD_FOUND FALSE)
endif()

if(NOT CSHARP_PLATFORM)
    message(FATAL_ERROR "CSHARP_PLATFORM not set")
endif()

if(NOT CSHARP_TARGET_FRAMEWORK)
    message(FATAL_ERROR "CSHARP_TARGET_FRAMEWORK not set")
endif()

if(CSBUILD_FOUND)
    message(STATUS "Using Framework: ${CSHARP_TARGET_FRAMEWORK}")
    if(DotNetStandard_FOUND)
        message(STATUS "Using Framework: ${CSHARP_TARGET_FRAMEWORK}")
        message(STATUS "Using Platform: ${CSHARP_PLATFORM}")
    else()
        find_program(NUGET_EXE nuget)
        set(RESTORE_EXE ${NUGET_EXE})
        message(STATUS "Using Framework: v${CSHARP_TARGET_FRAMEWORK_VERSION}")
        message(STATUS "Using Platform: ${CSHARP_PLATFORM}")
    endif()
    set(CSBUILD_CSPROJ_IN "${CMAKE_CURRENT_LIST_DIR}/csharp/${CSBUILD_CSPROJ}.in")
    set(CSBUILD_USE_FILE "${CMAKE_CURRENT_LIST_DIR}/csharp/UseCSharpProjectBuilder.cmake")
endif()
